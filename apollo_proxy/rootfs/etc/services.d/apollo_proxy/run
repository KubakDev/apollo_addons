#!/usr/bin/with-contenv bashio

# Prepare /data/certs directory and copy existing certs from /etc/ssl/certs
# mkdir -p /data/certs
# cp -a /etc/ssl/certs/. /data/certs/

# Remove the existing /etc/ssl/certs directory (be very cautious with this step)
# rm -rf /etc/ssl/certs

# Create the symlinks correctly

# ln -s /data/certs /etc/ssl/certs
# ln -s /data/.ssh /home/.ssh

# Path to the flag file in a non-persistent directory
FLAG_FILE="/tmp/.certs_setup_done"
echo "Yo my man Hello"

# Check if the commands have already been run by checking for the flag file
if [ ! -f "$FLAG_FILE" ]; then
    echo "Setting up certs and symlinks for the first time..."

    # Prepare /data/certs directory and copy existing certs from /etc/ssl/certs
    mkdir -p /data/certs
    cp -a /etc/ssl/certs/. /data/certs/

    # Remove the existing /etc/ssl/certs directory (be very cautious with this step)
    rm -rf /etc/ssl/certs

    # Create the symlinks correctly
    ln -s /data/certs /etc/ssl/certs
    ln -s /data/.ssh /home/.ssh

    # Indicate that setup has been completed by creating a flag file
    touch "$FLAG_FILE"
else
    echo "Certs setup and symlinks have already been configured."
fi

# Your original script content follows
SERVER=$(bashio::config 'server')
TOKEN=$(bashio::config 'token')
CLIENTNAME=$(bashio::config 'clientname')
USER=$(bashio::config 'user')
EMAIL=$(bashio::config 'email')
CERTMAGIC=$(bashio::config 'certmagic')

# Define your errors in an array for easy management
# declare -a error_strings=("unable to register tcp forward" "eof" "connection reset by peer" "connection refused" "server misbehaving")

# # Function to check for specific log messages
# check_for_errors() {
#     while IFS= read -r line; do
#         # Convert line to lowercase
#         local lowercase_line=$(echo "$line" | tr '[:upper:]' '[:lower:]')
        
#         # Check each error string against the line
#         for error in "${error_strings[@]}"; do
#             if [[ "$lowercase_line" == *"$error"* ]]; then
#                 echo "$line"
#                 echo "Detected critical error, exiting..."
#                 exit 4
#             fi
#         done
        
#         echo "$line"
#     done
# }

exec /usr/bin/boringproxy client -server $SERVER -token $TOKEN -client-name $CLIENTNAME -user $USER -cert-dir $CERTMAGIC -acme-email $EMAIL 2>&1 | /etc/services.d/apollo_proxy/check_for_errors


